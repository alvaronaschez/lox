package jlox;

/*
 * expression -> literal
 * 						| unary
 * 						| binary
 * 						| grouping ;
 *
 * literal	-> NUMBER | STRING | "true" | "false" | "nil" ;
 * grouping	-> "(" expression ")" ;
 * unary		-> ( "-" | "!" ) expression ;
 * binary		-> expression operator expression ;
 * operator	-> "==" | "!=" | "<" | "<=" | ">" | ">=" 
 * 					| "+" | "-" | "*" | "/" ;
 *
 */

import java.util.List;

abstract class Expr {

	interface Visitor<R> {
		{% for type_name in types.keys() %}
		R visit{{type_name}}{{base_name}}({{type_name}} {{base_name.lower()}});
		{% endfor %}
	}

	abstract <R> R accept(Visitor<R> visitor);

	{% for type_name, attributes in types.items() %}
	static class {{type_name}} extends {{base_name}} {
		{# attributes #}
		{% for atr in attributes %}
		final {{ atr }};
		{% endfor %}

		{# constructor #}
		{{ type_name }}({{", ".join(attributes)}}) {
			{% for atr in attributes %}
				{% set atr_name = atr.split(" ")[1] %}
			this.{{atr_name}} = {{ atr_name}};
			{% endfor %}
		}

		@Override <R> R accept(Visitor<R> visitor) {
			return visitor.visit{{type_name}}{{base_name}}(this);
		}
	}

	{% endfor %}
}

