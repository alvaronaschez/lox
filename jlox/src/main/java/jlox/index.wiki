= lox =

== overview ==
scanning -> parsing -> interpreting
(scan -> parse -> interpret)

== scanning ==

=== lexical grammar ===

{{{ python
regex_pattern = r"""(?x) # verbose mode
    and|class|else|false|for|fun|if|nil|or|print|return|super|this|true|var|while # keywords
    |==|!=|<=|>= # two character tokens
    |\(|\)|\{|\}|,|\.|-|\+|;|\*|!|=|<|> # one character tokens
    |(?://.*$) # comments
    |\s+|\r+|\t+ # meaningless characters
    |\".*\" # string literal
    |\d+(?:\.\d+)* # number
    |[a-zA-Z_]+[a-zA-Z0-9_]* # identifier
    """
}}}

== parsing ==

=== syntactic grammar ===

=== amibuous context free grammar ===

{{{
expression	-> literal
						| unary
						| binary
						| grouping ;

literal			-> NUMBER | STRING | "true" | "false" | "nil" ;
grouping		-> "(" expression ")" ;
unary				-> ( "-" | "!" ) expression ;
binary			-> expression operator expression ;
operator		-> "==" | "!=" | "<" | "<=" | ">" | ">=" 
						| "+" | "-" | "*" | "/" ;
}}}

=== operators precedence and associativity ===


|--------------|-------------|------------|--------------|
| name         | operators   | precedence | associates   |
|--------------|-------------|------------|--------------|
| equality     | == !=       | 5          | left         |
| comparison   | > >= < <=   | 4          | left         |
| term         | - +         | 3          | left         |
| factor       | / *         | 2          | left         |
| unary        | ! -         | 1          | right        |
|--------------|-------------|------------|--------------|

=== unambiguous context free grammar ===

{{{
expression 	-> equality ;
equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" ;

}}}

=== gramar (chapter 8.1) ===
{{{
program -> statement* EOF ;

statement -> exprStmt | printStmt ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression 	-> equality ;
equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" ;

}}}

=== gramar (chapter 8.2) ===
{{{
program -> declaration* EOF ;

declaration -> varDecl | statement ;

statement -> exprStmt | printStmt ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression 	-> equality ;
equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" | IDENTIFIER;

}}}


=== gramar (chapter 8.3) ===
{{{
program -> declaration* EOF ;

declaration -> varDecl | statement ;

statement -> exprStmt | printStmt ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression 	-> assignment ;
assignment -> IDENTIFIER "=" assignment | equality ;

equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" | IDENTIFIER;

}}}

=== gramar (chapter 8.5) ===
{{{
program -> declaration* EOF ;

declaration -> varDecl | statement ;

statement -> exprStmt | printStmt | block ;

block -> "{" declarataion* "}" ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression 	-> assignment ;
assignment -> IDENTIFIER "=" assignment | equality ;

equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" | IDENTIFIER;

}}}


=== gramar (chapter 9.2) ===
{{{
program -> declaration* EOF ;

declaration -> varDecl | statement ;

statement -> exprStmt 
					| ifStmt
					| printStmt
					| block ;

ifStmt -> "if" "(" expression ")" statement  ( "else" statement )? ;

block -> "{" declarataion* "}" ;

varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt -> expression ";" ;
printStmt -> "print" expression ";" ;

expression 	-> assignment ;
assignment -> IDENTIFIER "=" assignment | equality ;

equality 		-> comparison (( "!=" | "==" ) comparison )* ;
comparison 	-> term (( ">" | ">=" | "<" | "<=" ) term )* ;
term 				-> factor (( "-" | "+" ) factor )* ;
factor 			-> unary (( "/" | "*" ) unary )* ;
unary 			-> ("!" | "-")* unary | primary ;
primary 		-> NUMBER | STRING | "true" | "false" | "nil"
						| "(" expression ")" | IDENTIFIER;

}}}
